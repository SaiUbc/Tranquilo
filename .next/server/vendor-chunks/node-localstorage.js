/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-localstorage";
exports.ids = ["vendor-chunks/node-localstorage"];
exports.modules = {

/***/ "(ssr)/./node_modules/node-localstorage/LocalStorage.js":
/*!********************************************************!*\
  !*** ./node_modules/node-localstorage/LocalStorage.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("// Generated by CoffeeScript 2.7.0\n(function() {\n  var JSONStorage, KEY_FOR_EMPTY_STRING, LocalStorage, MetaKey, QUOTA_EXCEEDED_ERR, StorageEvent, _emptyDirectory, _escapeKey, _rm, createMap, events, fs, path, writeSync;\n\n  path = __webpack_require__(/*! path */ \"path\");\n\n  fs = __webpack_require__(/*! fs */ \"fs\");\n\n  events = __webpack_require__(/*! events */ \"events\");\n\n  writeSync = (__webpack_require__(/*! write-file-atomic */ \"(ssr)/./node_modules/write-file-atomic/lib/index.js\").sync);\n\n  KEY_FOR_EMPTY_STRING = '---.EMPTY_STRING.---'; // Chose something that no one is likely to ever use\n\n  _emptyDirectory = function(target) {\n    var i, len, p, ref, results;\n    ref = fs.readdirSync(target);\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      p = ref[i];\n      results.push(_rm(path.join(target, p)));\n    }\n    return results;\n  };\n\n  _rm = function(target) {\n    if (fs.statSync(target).isDirectory()) {\n      _emptyDirectory(target);\n      return fs.rmdirSync(target);\n    } else {\n      return fs.unlinkSync(target);\n    }\n  };\n\n  _escapeKey = function(key) {\n    var newKey;\n    if (key === '') {\n      newKey = KEY_FOR_EMPTY_STRING;\n    } else {\n      newKey = `${key}`;\n    }\n    return newKey;\n  };\n\n  QUOTA_EXCEEDED_ERR = class QUOTA_EXCEEDED_ERR extends Error {\n    constructor(message = 'Unknown error.') {\n      super();\n      this.message = message;\n      if (Error.captureStackTrace != null) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n      this.name = this.constructor.name;\n    }\n\n    toString() {\n      return `${this.name}: ${this.message}`;\n    }\n\n  };\n\n  StorageEvent = class StorageEvent {\n    constructor(key1, oldValue1, newValue1, url, storageArea = 'localStorage') {\n      this.key = key1;\n      this.oldValue = oldValue1;\n      this.newValue = newValue1;\n      this.url = url;\n      this.storageArea = storageArea;\n    }\n\n  };\n\n  MetaKey = class MetaKey { // MetaKey contains key and size\n    constructor(key1, index1) {\n      this.key = key1;\n      this.index = index1;\n      if (!(this instanceof MetaKey)) {\n        return new MetaKey(this.key, this.index);\n      }\n    }\n\n  };\n\n  createMap = function() { // createMap contains Metakeys as properties\n    var Map;\n    Map = function() {};\n    Map.prototype = Object.create(null);\n    return new Map();\n  };\n\n  LocalStorage = (function() {\n    var instanceMap;\n\n    class LocalStorage extends events.EventEmitter {\n      constructor(_location, quota = 5 * 1024 * 1024) {\n        var handler;\n        super();\n        this._location = _location;\n        this.quota = quota;\n        // super(_location, quota)\n        // @_location = _location\n        // @quota = quota\n        if (!(this instanceof LocalStorage)) {\n          return new LocalStorage(this._location, this.quota);\n        }\n        this._location = path.resolve(this._location);\n        if (instanceMap[this._location] != null) {\n          return instanceMap[this._location];\n        }\n        this.length = 0; // !TODO: Maybe change this to a property with __defineProperty__\n        this._bytesInUse = 0;\n        this._keys = [];\n        this._metaKeyMap = createMap();\n        this._eventUrl = \"pid:\" + process.pid;\n        this._init();\n        this._QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;\n        if (typeof Proxy !== \"undefined\" && Proxy !== null) {\n          handler = {\n            set: (receiver, key, value) => {\n              if (this[key] != null) {\n                this[key] = value;\n              } else {\n                this.setItem(key, value);\n              }\n              return true;\n            },\n            get: (receiver, key) => {\n              if (this[key] != null) {\n                return this[key];\n              } else {\n                return this.getItem(key);\n              }\n            },\n            ownKeys: (target) => {\n              return this._keys.map(function(k) {\n                if (k === KEY_FOR_EMPTY_STRING) {\n                  return '';\n                } else {\n                  return k;\n                }\n              });\n            },\n            getOwnPropertyDescriptor: (target, key) => {\n              return {\n                value: this[key],\n                enumerable: true,\n                configurable: true\n              };\n            }\n          };\n          instanceMap[this._location] = new Proxy(this, handler);\n          return instanceMap[this._location];\n        }\n        // else it'll return this\n        instanceMap[this._location] = this;\n        return instanceMap[this._location];\n      }\n\n      _init() {\n        var e, stat;\n        try {\n          stat = fs.statSync(this._location);\n          if ((stat != null) && !stat.isDirectory()) {\n            throw new Error(`A file exists at the location '${this._location}' when trying to create/open localStorage`);\n          }\n          // At this point, it exists and is definitely a directory. So read it.\n          this._sync();\n        } catch (error) {\n          e = error;\n          // If it errors, that might mean it didn't exist, so try to create it\n          if (e.code !== \"ENOENT\") {\n            throw e;\n          }\n          try {\n            fs.mkdirSync(this._location, {\n              recursive: true\n            });\n          } catch (error) {\n            e = error;\n            if (e.code !== \"EEXIST\") {\n              throw e;\n            }\n          }\n        }\n      }\n\n      _sync() {\n        var _MetaKey, _decodedKey, _keys, i, index, k, len, stat;\n        this._bytesInUse = 0;\n        this.length = 0;\n        _keys = fs.readdirSync(this._location);\n        for (index = i = 0, len = _keys.length; i < len; index = ++i) {\n          k = _keys[index];\n          _decodedKey = decodeURIComponent(k);\n          this._keys.push(_decodedKey);\n          _MetaKey = new MetaKey(k, index);\n          this._metaKeyMap[_decodedKey] = _MetaKey;\n          stat = this._getStat(k);\n          if ((stat != null ? stat.size : void 0) != null) {\n            _MetaKey.size = stat.size;\n            this._bytesInUse += stat.size;\n          }\n        }\n        return this.length = _keys.length;\n      }\n\n      setItem(key, value) {\n        var encodedKey, evnt, existsBeforeSet, filename, hasListeners, metaKey, oldLength, oldValue, valueString, valueStringLength;\n        hasListeners = this.listenerCount('storage');\n        oldValue = null;\n        if (hasListeners) {\n          oldValue = this.getItem(key);\n        }\n        key = _escapeKey(key);\n        encodedKey = encodeURIComponent(key).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\n        filename = path.join(this._location, encodedKey);\n        valueString = `${value}`;\n        valueStringLength = valueString.length;\n        metaKey = this._metaKeyMap[key];\n        existsBeforeSet = !!metaKey;\n        if (existsBeforeSet) {\n          oldLength = metaKey.size;\n        } else {\n          oldLength = 0;\n        }\n        if (this._bytesInUse - oldLength + valueStringLength > this.quota) {\n          throw new QUOTA_EXCEEDED_ERR();\n        }\n        writeSync(filename, valueString, {\n          encoding: 'utf8'\n        });\n        if (!existsBeforeSet) {\n          metaKey = new MetaKey(encodedKey, (this._keys.push(key)) - 1);\n          metaKey.size = valueStringLength;\n          this._metaKeyMap[key] = metaKey;\n          this.length += 1;\n          this._bytesInUse += valueStringLength;\n        }\n        if (hasListeners) {\n          evnt = new StorageEvent(key, oldValue, value, this._eventUrl);\n          return this.emit('storage', evnt);\n        }\n      }\n\n      getItem(key) {\n        var filename, metaKey;\n        key = _escapeKey(key);\n        metaKey = this._metaKeyMap[key];\n        if (!!metaKey) {\n          filename = path.join(this._location, metaKey.key);\n          return fs.readFileSync(filename, 'utf8');\n        } else {\n          return null;\n        }\n      }\n\n      _getStat(key) {\n        var filename;\n        key = _escapeKey(key);\n        filename = path.join(this._location, encodeURIComponent(key));\n        try {\n          return fs.statSync(filename);\n        } catch (error) {\n          return null;\n        }\n      }\n\n      removeItem(key) {\n        var evnt, filename, hasListeners, k, meta, metaKey, oldValue, ref, v;\n        key = _escapeKey(key);\n        metaKey = this._metaKeyMap[key];\n        if (!!metaKey) {\n          hasListeners = this.listenerCount('storage');\n          oldValue = null;\n          if (hasListeners) {\n            oldValue = this.getItem(key);\n          }\n          delete this._metaKeyMap[key];\n          this.length -= 1;\n          this._bytesInUse -= metaKey.size;\n          filename = path.join(this._location, metaKey.key);\n          this._keys.splice(metaKey.index, 1);\n          ref = this._metaKeyMap;\n          for (k in ref) {\n            v = ref[k];\n            meta = this._metaKeyMap[k];\n            if (meta.index > metaKey.index) {\n              meta.index -= 1;\n            }\n          }\n          _rm(filename);\n          if (hasListeners) {\n            evnt = new StorageEvent(key, oldValue, null, this._eventUrl);\n            return this.emit('storage', evnt);\n          }\n        }\n      }\n\n      key(n) {\n        var rawKey;\n        rawKey = this._keys[n];\n        if (rawKey === KEY_FOR_EMPTY_STRING) {\n          return '';\n        } else {\n          return rawKey;\n        }\n      }\n\n      clear() {\n        var evnt;\n        _emptyDirectory(this._location);\n        this._metaKeyMap = createMap();\n        this._keys = [];\n        this.length = 0;\n        this._bytesInUse = 0;\n        if (this.listenerCount('storage')) {\n          evnt = new StorageEvent(null, null, null, this._eventUrl);\n          return this.emit('storage', evnt);\n        }\n      }\n\n      _getBytesInUse() {\n        return this._bytesInUse;\n      }\n\n      _deleteLocation() {\n        delete instanceMap[this._location];\n        _rm(this._location);\n        this._metaKeyMap = {};\n        this._keys = [];\n        this.length = 0;\n        return this._bytesInUse = 0;\n      }\n\n    };\n\n    instanceMap = {};\n\n    return LocalStorage;\n\n  }).call(this);\n\n  JSONStorage = class JSONStorage extends LocalStorage {\n    setItem(key, value) {\n      var newValue;\n      newValue = JSON.stringify(value);\n      return super.setItem(key, newValue);\n    }\n\n    getItem(key) {\n      return JSON.parse(super.getItem(key));\n    }\n\n  };\n\n  exports.LocalStorage = LocalStorage;\n\n  exports.JSONStorage = JSONStorage;\n\n  exports.QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;\n\n}).call(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/node-localstorage/LocalStorage.js\n");

/***/ })

};
;