"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/form-data-encoder";
exports.ids = ["vendor-chunks/form-data-encoder"];
exports.modules = {

/***/ "(ssr)/./node_modules/form-data-encoder/lib/index.cjs":
/*!******************************************************!*\
  !*** ./node_modules/form-data-encoder/lib/index.cjs ***!
  \******************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  FormDataEncoder: () => FormDataEncoder,\n  isFile: () => isFile,\n  isFormData: () => isFormData\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/util/isFunction.ts\nvar isFunction = (value) => typeof value === \"function\";\n\n// src/util/isAsyncIterable.ts\nvar isAsyncIterable = (value) => isFunction(value[Symbol.asyncIterator]);\n\n// src/util/chunk.ts\nvar MAX_CHUNK_SIZE = 65536;\nfunction* chunk(value) {\n  if (value.byteLength <= MAX_CHUNK_SIZE) {\n    yield value;\n    return;\n  }\n  let offset = 0;\n  while (offset < value.byteLength) {\n    const size = Math.min(value.byteLength - offset, MAX_CHUNK_SIZE);\n    const buffer = value.buffer.slice(offset, offset + size);\n    offset += buffer.byteLength;\n    yield new Uint8Array(buffer);\n  }\n}\n\n// src/util/getStreamIterator.ts\nasync function* readStream(readable) {\n  const reader = readable.getReader();\n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) {\n      break;\n    }\n    yield value;\n  }\n}\nasync function* chunkStream(stream) {\n  for await (const value of stream) {\n    yield* chunk(value);\n  }\n}\nvar getStreamIterator = (source) => {\n  if (isAsyncIterable(source)) {\n    return chunkStream(source);\n  }\n  if (isFunction(source.getReader)) {\n    return chunkStream(readStream(source));\n  }\n  throw new TypeError(\n    \"Unsupported data source: Expected either ReadableStream or async iterable.\"\n  );\n};\n\n// src/util/createBoundary.ts\nvar alphabet = \"abcdefghijklmnopqrstuvwxyz0123456789\";\nfunction createBoundary() {\n  let size = 16;\n  let res = \"\";\n  while (size--) {\n    res += alphabet[Math.random() * alphabet.length << 0];\n  }\n  return res;\n}\n\n// src/util/normalizeValue.ts\nvar normalizeValue = (value) => String(value).replace(/\\r|\\n/g, (match, i, str) => {\n  if (match === \"\\r\" && str[i + 1] !== \"\\n\" || match === \"\\n\" && str[i - 1] !== \"\\r\") {\n    return \"\\r\\n\";\n  }\n  return match;\n});\n\n// src/util/isPlainObject.ts\nvar getType = (value) => Object.prototype.toString.call(value).slice(8, -1).toLowerCase();\nfunction isPlainObject(value) {\n  if (getType(value) !== \"object\") {\n    return false;\n  }\n  const pp = Object.getPrototypeOf(value);\n  if (pp === null || pp === void 0) {\n    return true;\n  }\n  const Ctor = pp.constructor && pp.constructor.toString();\n  return Ctor === Object.toString();\n}\n\n// src/util/proxyHeaders.ts\nfunction getProperty(target, prop) {\n  if (typeof prop === \"string\") {\n    for (const [name, value] of Object.entries(target)) {\n      if (prop.toLowerCase() === name.toLowerCase()) {\n        return value;\n      }\n    }\n  }\n  return void 0;\n}\nvar proxyHeaders = (object) => new Proxy(\n  object,\n  {\n    get: (target, prop) => getProperty(target, prop),\n    has: (target, prop) => getProperty(target, prop) !== void 0\n  }\n);\n\n// src/util/isFormData.ts\nvar isFormData = (value) => Boolean(\n  value && isFunction(value.constructor) && value[Symbol.toStringTag] === \"FormData\" && isFunction(value.append) && isFunction(value.getAll) && isFunction(value.entries) && isFunction(value[Symbol.iterator])\n);\n\n// src/util/escapeName.ts\nvar escapeName = (name) => String(name).replace(/\\r/g, \"%0D\").replace(/\\n/g, \"%0A\").replace(/\"/g, \"%22\");\n\n// src/util/isFile.ts\nvar isFile = (value) => Boolean(\n  value && typeof value === \"object\" && isFunction(value.constructor) && value[Symbol.toStringTag] === \"File\" && isFunction(value.stream) && value.name != null\n);\n\n// src/FormDataEncoder.ts\nvar defaultOptions = {\n  enableAdditionalHeaders: false\n};\nvar readonlyProp = { writable: false, configurable: false };\nvar _CRLF, _CRLF_BYTES, _CRLF_BYTES_LENGTH, _DASHES, _encoder, _footer, _form, _options, _getFieldHeader, getFieldHeader_fn, _getContentLength, getContentLength_fn;\nvar FormDataEncoder = class {\n  constructor(form, boundaryOrOptions, options) {\n    __privateAdd(this, _getFieldHeader);\n    /**\n     * Returns form-data content length\n     */\n    __privateAdd(this, _getContentLength);\n    __privateAdd(this, _CRLF, \"\\r\\n\");\n    __privateAdd(this, _CRLF_BYTES, void 0);\n    __privateAdd(this, _CRLF_BYTES_LENGTH, void 0);\n    __privateAdd(this, _DASHES, \"-\".repeat(2));\n    /**\n     * TextEncoder instance\n     */\n    __privateAdd(this, _encoder, new TextEncoder());\n    /**\n     * Returns form-data footer bytes\n     */\n    __privateAdd(this, _footer, void 0);\n    /**\n     * FormData instance\n     */\n    __privateAdd(this, _form, void 0);\n    /**\n     * Instance options\n     */\n    __privateAdd(this, _options, void 0);\n    if (!isFormData(form)) {\n      throw new TypeError(\"Expected first argument to be a FormData instance.\");\n    }\n    let boundary;\n    if (isPlainObject(boundaryOrOptions)) {\n      options = boundaryOrOptions;\n    } else {\n      boundary = boundaryOrOptions;\n    }\n    if (!boundary) {\n      boundary = createBoundary();\n    }\n    if (typeof boundary !== \"string\") {\n      throw new TypeError(\"Expected boundary argument to be a string.\");\n    }\n    if (options && !isPlainObject(options)) {\n      throw new TypeError(\"Expected options argument to be an object.\");\n    }\n    __privateSet(this, _form, Array.from(form.entries()));\n    __privateSet(this, _options, { ...defaultOptions, ...options });\n    __privateSet(this, _CRLF_BYTES, __privateGet(this, _encoder).encode(__privateGet(this, _CRLF)));\n    __privateSet(this, _CRLF_BYTES_LENGTH, __privateGet(this, _CRLF_BYTES).byteLength);\n    this.boundary = `form-data-boundary-${boundary}`;\n    this.contentType = `multipart/form-data; boundary=${this.boundary}`;\n    __privateSet(this, _footer, __privateGet(this, _encoder).encode(\n      `${__privateGet(this, _DASHES)}${this.boundary}${__privateGet(this, _DASHES)}${__privateGet(this, _CRLF).repeat(2)}`\n    ));\n    const headers = {\n      \"Content-Type\": this.contentType\n    };\n    const contentLength = __privateMethod(this, _getContentLength, getContentLength_fn).call(this);\n    if (contentLength) {\n      this.contentLength = contentLength;\n      headers[\"Content-Length\"] = contentLength;\n    }\n    this.headers = proxyHeaders(Object.freeze(headers));\n    Object.defineProperties(this, {\n      boundary: readonlyProp,\n      contentType: readonlyProp,\n      contentLength: readonlyProp,\n      headers: readonlyProp\n    });\n  }\n  /**\n   * Creates an iterator allowing to go through form-data parts (with metadata).\n   * This method **will not** read the files and **will not** split values big into smaller chunks.\n   *\n   * Using this method, you can convert form-data content into Blob:\n   *\n   * @example\n   *\n   * ```ts\n   * import {Readable} from \"stream\"\n   *\n   * import {FormDataEncoder} from \"form-data-encoder\"\n   *\n   * import {FormData} from \"formdata-polyfill/esm-min.js\"\n   * import {fileFrom} from \"fetch-blob/form.js\"\n   * import {File} from \"fetch-blob/file.js\"\n   * import {Blob} from \"fetch-blob\"\n   *\n   * import fetch from \"node-fetch\"\n   *\n   * const form = new FormData()\n   *\n   * form.set(\"field\", \"Just a random string\")\n   * form.set(\"file\", new File([\"Using files is class amazing\"]))\n   * form.set(\"fileFromPath\", await fileFrom(\"path/to/a/file.txt\"))\n   *\n   * const encoder = new FormDataEncoder(form)\n   *\n   * const options = {\n   *   method: \"post\",\n   *   body: new Blob(encoder, {type: encoder.contentType})\n   * }\n   *\n   * const response = await fetch(\"https://httpbin.org/post\", options)\n   *\n   * console.log(await response.json())\n   * ```\n   */\n  *values() {\n    for (const [name, raw] of __privateGet(this, _form)) {\n      const value = isFile(raw) ? raw : __privateGet(this, _encoder).encode(\n        normalizeValue(raw)\n      );\n      yield __privateMethod(this, _getFieldHeader, getFieldHeader_fn).call(this, name, value);\n      yield value;\n      yield __privateGet(this, _CRLF_BYTES);\n    }\n    yield __privateGet(this, _footer);\n  }\n  /**\n   * Creates an async iterator allowing to perform the encoding by portions.\n   * This method reads through files and splits big values into smaller pieces (65536 bytes per each).\n   *\n   * @example\n   *\n   * ```ts\n   * import {Readable} from \"stream\"\n   *\n   * import {FormData, File, fileFromPath} from \"formdata-node\"\n   * import {FormDataEncoder} from \"form-data-encoder\"\n   *\n   * import fetch from \"node-fetch\"\n   *\n   * const form = new FormData()\n   *\n   * form.set(\"field\", \"Just a random string\")\n   * form.set(\"file\", new File([\"Using files is class amazing\"], \"file.txt\"))\n   * form.set(\"fileFromPath\", await fileFromPath(\"path/to/a/file.txt\"))\n   *\n   * const encoder = new FormDataEncoder(form)\n   *\n   * const options = {\n   *   method: \"post\",\n   *   headers: encoder.headers,\n   *   body: Readable.from(encoder.encode()) // or Readable.from(encoder)\n   * }\n   *\n   * const response = await fetch(\"https://httpbin.org/post\", options)\n   *\n   * console.log(await response.json())\n   * ```\n   */\n  async *encode() {\n    for (const part of this.values()) {\n      if (isFile(part)) {\n        yield* getStreamIterator(part.stream());\n      } else {\n        yield* chunk(part);\n      }\n    }\n  }\n  /**\n   * Creates an iterator allowing to read through the encoder data using for...of loops\n   */\n  [Symbol.iterator]() {\n    return this.values();\n  }\n  /**\n   * Creates an **async** iterator allowing to read through the encoder data using for-await...of loops\n   */\n  [Symbol.asyncIterator]() {\n    return this.encode();\n  }\n};\n_CRLF = new WeakMap();\n_CRLF_BYTES = new WeakMap();\n_CRLF_BYTES_LENGTH = new WeakMap();\n_DASHES = new WeakMap();\n_encoder = new WeakMap();\n_footer = new WeakMap();\n_form = new WeakMap();\n_options = new WeakMap();\n_getFieldHeader = new WeakSet();\ngetFieldHeader_fn = function(name, value) {\n  let header = \"\";\n  header += `${__privateGet(this, _DASHES)}${this.boundary}${__privateGet(this, _CRLF)}`;\n  header += `Content-Disposition: form-data; name=\"${escapeName(name)}\"`;\n  if (isFile(value)) {\n    header += `; filename=\"${escapeName(value.name)}\"${__privateGet(this, _CRLF)}`;\n    header += `Content-Type: ${value.type || \"application/octet-stream\"}`;\n  }\n  if (__privateGet(this, _options).enableAdditionalHeaders === true) {\n    const size = isFile(value) ? value.size : value.byteLength;\n    if (size != null && !isNaN(size)) {\n      header += `${__privateGet(this, _CRLF)}Content-Length: ${size}`;\n    }\n  }\n  return __privateGet(this, _encoder).encode(`${header}${__privateGet(this, _CRLF).repeat(2)}`);\n};\n_getContentLength = new WeakSet();\ngetContentLength_fn = function() {\n  let length = 0;\n  for (const [name, raw] of __privateGet(this, _form)) {\n    const value = isFile(raw) ? raw : __privateGet(this, _encoder).encode(\n      normalizeValue(raw)\n    );\n    const size = isFile(value) ? value.size : value.byteLength;\n    if (size == null || isNaN(size)) {\n      return void 0;\n    }\n    length += __privateMethod(this, _getFieldHeader, getFieldHeader_fn).call(this, name, value).byteLength;\n    length += size;\n    length += __privateGet(this, _CRLF_BYTES_LENGTH);\n  }\n  return String(length + __privateGet(this, _footer).byteLength);\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhLWVuY29kZXIvbGliL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qiw0RkFBNEY7QUFDekg7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELGtCQUFrQixhQUFhO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLCtCQUErQjtBQUNsRTtBQUNBO0FBQ0EsMENBQTBDLFNBQVM7QUFDbkQsNkNBQTZDLFdBQVcsY0FBYztBQUN0RTtBQUNBLFNBQVMsNEJBQTRCLEVBQUUsY0FBYyxFQUFFLDRCQUE0QixFQUFFLG9DQUFvQztBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQSxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBLGFBQWEsVUFBVTtBQUN2QixhQUFhLFVBQVU7QUFDdkIsYUFBYSxNQUFNO0FBQ25CLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwQkFBMEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkI7QUFDQSxhQUFhLDhCQUE4QjtBQUMzQyxhQUFhLGlCQUFpQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw0QkFBNEIsRUFBRSxjQUFjLEVBQUUsMEJBQTBCO0FBQ3ZGLDZDQUE2QyxRQUFRLGlCQUFpQjtBQUN0RTtBQUNBLGlCQUFpQixZQUFZLHVCQUF1QixHQUFHLDBCQUEwQjtBQUNqRiwrQkFBK0IseUNBQXlDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDBCQUEwQixrQkFBa0IsS0FBSztBQUNwRTtBQUNBO0FBQ0EsZ0RBQWdELE9BQU8sRUFBRSxvQ0FBb0M7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLENBSUwiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9odW1lLWV2aS1uZXh0LWpzLXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZm9ybS1kYXRhLWVuY29kZXIvbGliL2luZGV4LmNqcz83NDFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbn07XG52YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIF9fZ2V0T3duUHJvcE5hbWVzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0NvbW1vbkpTID0gKG1vZCkgPT4gX19jb3B5UHJvcHMoX19kZWZQcm9wKHt9LCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KSwgbW9kKTtcbnZhciBfX2FjY2Vzc0NoZWNrID0gKG9iaiwgbWVtYmVyLCBtc2cpID0+IHtcbiAgaWYgKCFtZW1iZXIuaGFzKG9iaikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IFwiICsgbXNnKTtcbn07XG52YXIgX19wcml2YXRlR2V0ID0gKG9iaiwgbWVtYmVyLCBnZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJyZWFkIGZyb20gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgcmV0dXJuIGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiBtZW1iZXIuZ2V0KG9iaik7XG59O1xudmFyIF9fcHJpdmF0ZUFkZCA9IChvYmosIG1lbWJlciwgdmFsdWUpID0+IHtcbiAgaWYgKG1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIHRoZSBzYW1lIHByaXZhdGUgbWVtYmVyIG1vcmUgdGhhbiBvbmNlXCIpO1xuICBtZW1iZXIgaW5zdGFuY2VvZiBXZWFrU2V0ID8gbWVtYmVyLmFkZChvYmopIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbn07XG52YXIgX19wcml2YXRlU2V0ID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSwgc2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgc2V0dGVyID8gc2V0dGVyLmNhbGwob2JqLCB2YWx1ZSkgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xudmFyIF9fcHJpdmF0ZU1ldGhvZCA9IChvYmosIG1lbWJlciwgbWV0aG9kKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwiYWNjZXNzIHByaXZhdGUgbWV0aG9kXCIpO1xuICByZXR1cm4gbWV0aG9kO1xufTtcblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3JjX2V4cG9ydHMgPSB7fTtcbl9fZXhwb3J0KHNyY19leHBvcnRzLCB7XG4gIEZvcm1EYXRhRW5jb2RlcjogKCkgPT4gRm9ybURhdGFFbmNvZGVyLFxuICBpc0ZpbGU6ICgpID0+IGlzRmlsZSxcbiAgaXNGb3JtRGF0YTogKCkgPT4gaXNGb3JtRGF0YVxufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy91dGlsL2lzRnVuY3Rpb24udHNcbnZhciBpc0Z1bmN0aW9uID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcblxuLy8gc3JjL3V0aWwvaXNBc3luY0l0ZXJhYmxlLnRzXG52YXIgaXNBc3luY0l0ZXJhYmxlID0gKHZhbHVlKSA9PiBpc0Z1bmN0aW9uKHZhbHVlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG5cbi8vIHNyYy91dGlsL2NodW5rLnRzXG52YXIgTUFYX0NIVU5LX1NJWkUgPSA2NTUzNjtcbmZ1bmN0aW9uKiBjaHVuayh2YWx1ZSkge1xuICBpZiAodmFsdWUuYnl0ZUxlbmd0aCA8PSBNQVhfQ0hVTktfU0laRSkge1xuICAgIHlpZWxkIHZhbHVlO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgb2Zmc2V0ID0gMDtcbiAgd2hpbGUgKG9mZnNldCA8IHZhbHVlLmJ5dGVMZW5ndGgpIHtcbiAgICBjb25zdCBzaXplID0gTWF0aC5taW4odmFsdWUuYnl0ZUxlbmd0aCAtIG9mZnNldCwgTUFYX0NIVU5LX1NJWkUpO1xuICAgIGNvbnN0IGJ1ZmZlciA9IHZhbHVlLmJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHNpemUpO1xuICAgIG9mZnNldCArPSBidWZmZXIuYnl0ZUxlbmd0aDtcbiAgICB5aWVsZCBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICB9XG59XG5cbi8vIHNyYy91dGlsL2dldFN0cmVhbUl0ZXJhdG9yLnRzXG5hc3luYyBmdW5jdGlvbiogcmVhZFN0cmVhbShyZWFkYWJsZSkge1xuICBjb25zdCByZWFkZXIgPSByZWFkYWJsZS5nZXRSZWFkZXIoKTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgIGlmIChkb25lKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgeWllbGQgdmFsdWU7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uKiBjaHVua1N0cmVhbShzdHJlYW0pIHtcbiAgZm9yIGF3YWl0IChjb25zdCB2YWx1ZSBvZiBzdHJlYW0pIHtcbiAgICB5aWVsZCogY2h1bmsodmFsdWUpO1xuICB9XG59XG52YXIgZ2V0U3RyZWFtSXRlcmF0b3IgPSAoc291cmNlKSA9PiB7XG4gIGlmIChpc0FzeW5jSXRlcmFibGUoc291cmNlKSkge1xuICAgIHJldHVybiBjaHVua1N0cmVhbShzb3VyY2UpO1xuICB9XG4gIGlmIChpc0Z1bmN0aW9uKHNvdXJjZS5nZXRSZWFkZXIpKSB7XG4gICAgcmV0dXJuIGNodW5rU3RyZWFtKHJlYWRTdHJlYW0oc291cmNlKSk7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICBcIlVuc3VwcG9ydGVkIGRhdGEgc291cmNlOiBFeHBlY3RlZCBlaXRoZXIgUmVhZGFibGVTdHJlYW0gb3IgYXN5bmMgaXRlcmFibGUuXCJcbiAgKTtcbn07XG5cbi8vIHNyYy91dGlsL2NyZWF0ZUJvdW5kYXJ5LnRzXG52YXIgYWxwaGFiZXQgPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiO1xuZnVuY3Rpb24gY3JlYXRlQm91bmRhcnkoKSB7XG4gIGxldCBzaXplID0gMTY7XG4gIGxldCByZXMgPSBcIlwiO1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgcmVzICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGggPDwgMF07XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuLy8gc3JjL3V0aWwvbm9ybWFsaXplVmFsdWUudHNcbnZhciBub3JtYWxpemVWYWx1ZSA9ICh2YWx1ZSkgPT4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cXHJ8XFxuL2csIChtYXRjaCwgaSwgc3RyKSA9PiB7XG4gIGlmIChtYXRjaCA9PT0gXCJcXHJcIiAmJiBzdHJbaSArIDFdICE9PSBcIlxcblwiIHx8IG1hdGNoID09PSBcIlxcblwiICYmIHN0cltpIC0gMV0gIT09IFwiXFxyXCIpIHtcbiAgICByZXR1cm4gXCJcXHJcXG5cIjtcbiAgfVxuICByZXR1cm4gbWF0Y2g7XG59KTtcblxuLy8gc3JjL3V0aWwvaXNQbGFpbk9iamVjdC50c1xudmFyIGdldFR5cGUgPSAodmFsdWUpID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCk7XG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmIChnZXRUeXBlKHZhbHVlKSAhPT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBwcCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gIGlmIChwcCA9PT0gbnVsbCB8fCBwcCA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgQ3RvciA9IHBwLmNvbnN0cnVjdG9yICYmIHBwLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCk7XG4gIHJldHVybiBDdG9yID09PSBPYmplY3QudG9TdHJpbmcoKTtcbn1cblxuLy8gc3JjL3V0aWwvcHJveHlIZWFkZXJzLnRzXG5mdW5jdGlvbiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3ApIHtcbiAgaWYgKHR5cGVvZiBwcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHRhcmdldCkpIHtcbiAgICAgIGlmIChwcm9wLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG52YXIgcHJveHlIZWFkZXJzID0gKG9iamVjdCkgPT4gbmV3IFByb3h5KFxuICBvYmplY3QsXG4gIHtcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3ApID0+IGdldFByb3BlcnR5KHRhcmdldCwgcHJvcCksXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiBnZXRQcm9wZXJ0eSh0YXJnZXQsIHByb3ApICE9PSB2b2lkIDBcbiAgfVxuKTtcblxuLy8gc3JjL3V0aWwvaXNGb3JtRGF0YS50c1xudmFyIGlzRm9ybURhdGEgPSAodmFsdWUpID0+IEJvb2xlYW4oXG4gIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUuY29uc3RydWN0b3IpICYmIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IFwiRm9ybURhdGFcIiAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFwcGVuZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5nZXRBbGwpICYmIGlzRnVuY3Rpb24odmFsdWUuZW50cmllcykgJiYgaXNGdW5jdGlvbih2YWx1ZVtTeW1ib2wuaXRlcmF0b3JdKVxuKTtcblxuLy8gc3JjL3V0aWwvZXNjYXBlTmFtZS50c1xudmFyIGVzY2FwZU5hbWUgPSAobmFtZSkgPT4gU3RyaW5nKG5hbWUpLnJlcGxhY2UoL1xcci9nLCBcIiUwRFwiKS5yZXBsYWNlKC9cXG4vZywgXCIlMEFcIikucmVwbGFjZSgvXCIvZywgXCIlMjJcIik7XG5cbi8vIHNyYy91dGlsL2lzRmlsZS50c1xudmFyIGlzRmlsZSA9ICh2YWx1ZSkgPT4gQm9vbGVhbihcbiAgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIGlzRnVuY3Rpb24odmFsdWUuY29uc3RydWN0b3IpICYmIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IFwiRmlsZVwiICYmIGlzRnVuY3Rpb24odmFsdWUuc3RyZWFtKSAmJiB2YWx1ZS5uYW1lICE9IG51bGxcbik7XG5cbi8vIHNyYy9Gb3JtRGF0YUVuY29kZXIudHNcbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZW5hYmxlQWRkaXRpb25hbEhlYWRlcnM6IGZhbHNlXG59O1xudmFyIHJlYWRvbmx5UHJvcCA9IHsgd3JpdGFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlIH07XG52YXIgX0NSTEYsIF9DUkxGX0JZVEVTLCBfQ1JMRl9CWVRFU19MRU5HVEgsIF9EQVNIRVMsIF9lbmNvZGVyLCBfZm9vdGVyLCBfZm9ybSwgX29wdGlvbnMsIF9nZXRGaWVsZEhlYWRlciwgZ2V0RmllbGRIZWFkZXJfZm4sIF9nZXRDb250ZW50TGVuZ3RoLCBnZXRDb250ZW50TGVuZ3RoX2ZuO1xudmFyIEZvcm1EYXRhRW5jb2RlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoZm9ybSwgYm91bmRhcnlPck9wdGlvbnMsIG9wdGlvbnMpIHtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX2dldEZpZWxkSGVhZGVyKTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGZvcm0tZGF0YSBjb250ZW50IGxlbmd0aFxuICAgICAqL1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfZ2V0Q29udGVudExlbmd0aCk7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9DUkxGLCBcIlxcclxcblwiKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX0NSTEZfQllURVMsIHZvaWQgMCk7XG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9DUkxGX0JZVEVTX0xFTkdUSCwgdm9pZCAwKTtcbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX0RBU0hFUywgXCItXCIucmVwZWF0KDIpKTtcbiAgICAvKipcbiAgICAgKiBUZXh0RW5jb2RlciBpbnN0YW5jZVxuICAgICAqL1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfZW5jb2RlciwgbmV3IFRleHRFbmNvZGVyKCkpO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgZm9ybS1kYXRhIGZvb3RlciBieXRlc1xuICAgICAqL1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfZm9vdGVyLCB2b2lkIDApO1xuICAgIC8qKlxuICAgICAqIEZvcm1EYXRhIGluc3RhbmNlXG4gICAgICovXG4gICAgX19wcml2YXRlQWRkKHRoaXMsIF9mb3JtLCB2b2lkIDApO1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9wdGlvbnNcbiAgICAgKi9cbiAgICBfX3ByaXZhdGVBZGQodGhpcywgX29wdGlvbnMsIHZvaWQgMCk7XG4gICAgaWYgKCFpc0Zvcm1EYXRhKGZvcm0pKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBGb3JtRGF0YSBpbnN0YW5jZS5cIik7XG4gICAgfVxuICAgIGxldCBib3VuZGFyeTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChib3VuZGFyeU9yT3B0aW9ucykpIHtcbiAgICAgIG9wdGlvbnMgPSBib3VuZGFyeU9yT3B0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgYm91bmRhcnkgPSBib3VuZGFyeU9yT3B0aW9ucztcbiAgICB9XG4gICAgaWYgKCFib3VuZGFyeSkge1xuICAgICAgYm91bmRhcnkgPSBjcmVhdGVCb3VuZGFyeSgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGJvdW5kYXJ5ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYm91bmRhcnkgYXJndW1lbnQgdG8gYmUgYSBzdHJpbmcuXCIpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucyAmJiAhaXNQbGFpbk9iamVjdChvcHRpb25zKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4cGVjdGVkIG9wdGlvbnMgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LlwiKTtcbiAgICB9XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9mb3JtLCBBcnJheS5mcm9tKGZvcm0uZW50cmllcygpKSk7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9vcHRpb25zLCB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH0pO1xuICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfQ1JMRl9CWVRFUywgX19wcml2YXRlR2V0KHRoaXMsIF9lbmNvZGVyKS5lbmNvZGUoX19wcml2YXRlR2V0KHRoaXMsIF9DUkxGKSkpO1xuICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfQ1JMRl9CWVRFU19MRU5HVEgsIF9fcHJpdmF0ZUdldCh0aGlzLCBfQ1JMRl9CWVRFUykuYnl0ZUxlbmd0aCk7XG4gICAgdGhpcy5ib3VuZGFyeSA9IGBmb3JtLWRhdGEtYm91bmRhcnktJHtib3VuZGFyeX1gO1xuICAgIHRoaXMuY29udGVudFR5cGUgPSBgbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9JHt0aGlzLmJvdW5kYXJ5fWA7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9mb290ZXIsIF9fcHJpdmF0ZUdldCh0aGlzLCBfZW5jb2RlcikuZW5jb2RlKFxuICAgICAgYCR7X19wcml2YXRlR2V0KHRoaXMsIF9EQVNIRVMpfSR7dGhpcy5ib3VuZGFyeX0ke19fcHJpdmF0ZUdldCh0aGlzLCBfREFTSEVTKX0ke19fcHJpdmF0ZUdldCh0aGlzLCBfQ1JMRikucmVwZWF0KDIpfWBcbiAgICApKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogdGhpcy5jb250ZW50VHlwZVxuICAgIH07XG4gICAgY29uc3QgY29udGVudExlbmd0aCA9IF9fcHJpdmF0ZU1ldGhvZCh0aGlzLCBfZ2V0Q29udGVudExlbmd0aCwgZ2V0Q29udGVudExlbmd0aF9mbikuY2FsbCh0aGlzKTtcbiAgICBpZiAoY29udGVudExlbmd0aCkge1xuICAgICAgdGhpcy5jb250ZW50TGVuZ3RoID0gY29udGVudExlbmd0aDtcbiAgICAgIGhlYWRlcnNbXCJDb250ZW50LUxlbmd0aFwiXSA9IGNvbnRlbnRMZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuaGVhZGVycyA9IHByb3h5SGVhZGVycyhPYmplY3QuZnJlZXplKGhlYWRlcnMpKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBib3VuZGFyeTogcmVhZG9ubHlQcm9wLFxuICAgICAgY29udGVudFR5cGU6IHJlYWRvbmx5UHJvcCxcbiAgICAgIGNvbnRlbnRMZW5ndGg6IHJlYWRvbmx5UHJvcCxcbiAgICAgIGhlYWRlcnM6IHJlYWRvbmx5UHJvcFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGl0ZXJhdG9yIGFsbG93aW5nIHRvIGdvIHRocm91Z2ggZm9ybS1kYXRhIHBhcnRzICh3aXRoIG1ldGFkYXRhKS5cbiAgICogVGhpcyBtZXRob2QgKip3aWxsIG5vdCoqIHJlYWQgdGhlIGZpbGVzIGFuZCAqKndpbGwgbm90Kiogc3BsaXQgdmFsdWVzIGJpZyBpbnRvIHNtYWxsZXIgY2h1bmtzLlxuICAgKlxuICAgKiBVc2luZyB0aGlzIG1ldGhvZCwgeW91IGNhbiBjb252ZXJ0IGZvcm0tZGF0YSBjb250ZW50IGludG8gQmxvYjpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogYGBgdHNcbiAgICogaW1wb3J0IHtSZWFkYWJsZX0gZnJvbSBcInN0cmVhbVwiXG4gICAqXG4gICAqIGltcG9ydCB7Rm9ybURhdGFFbmNvZGVyfSBmcm9tIFwiZm9ybS1kYXRhLWVuY29kZXJcIlxuICAgKlxuICAgKiBpbXBvcnQge0Zvcm1EYXRhfSBmcm9tIFwiZm9ybWRhdGEtcG9seWZpbGwvZXNtLW1pbi5qc1wiXG4gICAqIGltcG9ydCB7ZmlsZUZyb219IGZyb20gXCJmZXRjaC1ibG9iL2Zvcm0uanNcIlxuICAgKiBpbXBvcnQge0ZpbGV9IGZyb20gXCJmZXRjaC1ibG9iL2ZpbGUuanNcIlxuICAgKiBpbXBvcnQge0Jsb2J9IGZyb20gXCJmZXRjaC1ibG9iXCJcbiAgICpcbiAgICogaW1wb3J0IGZldGNoIGZyb20gXCJub2RlLWZldGNoXCJcbiAgICpcbiAgICogY29uc3QgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gICAqXG4gICAqIGZvcm0uc2V0KFwiZmllbGRcIiwgXCJKdXN0IGEgcmFuZG9tIHN0cmluZ1wiKVxuICAgKiBmb3JtLnNldChcImZpbGVcIiwgbmV3IEZpbGUoW1wiVXNpbmcgZmlsZXMgaXMgY2xhc3MgYW1hemluZ1wiXSkpXG4gICAqIGZvcm0uc2V0KFwiZmlsZUZyb21QYXRoXCIsIGF3YWl0IGZpbGVGcm9tKFwicGF0aC90by9hL2ZpbGUudHh0XCIpKVxuICAgKlxuICAgKiBjb25zdCBlbmNvZGVyID0gbmV3IEZvcm1EYXRhRW5jb2Rlcihmb3JtKVxuICAgKlxuICAgKiBjb25zdCBvcHRpb25zID0ge1xuICAgKiAgIG1ldGhvZDogXCJwb3N0XCIsXG4gICAqICAgYm9keTogbmV3IEJsb2IoZW5jb2Rlciwge3R5cGU6IGVuY29kZXIuY29udGVudFR5cGV9KVxuICAgKiB9XG4gICAqXG4gICAqIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2h0dHBiaW4ub3JnL3Bvc3RcIiwgb3B0aW9ucylcbiAgICpcbiAgICogY29uc29sZS5sb2coYXdhaXQgcmVzcG9uc2UuanNvbigpKVxuICAgKiBgYGBcbiAgICovXG4gICp2YWx1ZXMoKSB7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgcmF3XSBvZiBfX3ByaXZhdGVHZXQodGhpcywgX2Zvcm0pKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGlzRmlsZShyYXcpID8gcmF3IDogX19wcml2YXRlR2V0KHRoaXMsIF9lbmNvZGVyKS5lbmNvZGUoXG4gICAgICAgIG5vcm1hbGl6ZVZhbHVlKHJhdylcbiAgICAgICk7XG4gICAgICB5aWVsZCBfX3ByaXZhdGVNZXRob2QodGhpcywgX2dldEZpZWxkSGVhZGVyLCBnZXRGaWVsZEhlYWRlcl9mbikuY2FsbCh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIHlpZWxkIF9fcHJpdmF0ZUdldCh0aGlzLCBfQ1JMRl9CWVRFUyk7XG4gICAgfVxuICAgIHlpZWxkIF9fcHJpdmF0ZUdldCh0aGlzLCBfZm9vdGVyKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBhc3luYyBpdGVyYXRvciBhbGxvd2luZyB0byBwZXJmb3JtIHRoZSBlbmNvZGluZyBieSBwb3J0aW9ucy5cbiAgICogVGhpcyBtZXRob2QgcmVhZHMgdGhyb3VnaCBmaWxlcyBhbmQgc3BsaXRzIGJpZyB2YWx1ZXMgaW50byBzbWFsbGVyIHBpZWNlcyAoNjU1MzYgYnl0ZXMgcGVyIGVhY2gpLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBpbXBvcnQge1JlYWRhYmxlfSBmcm9tIFwic3RyZWFtXCJcbiAgICpcbiAgICogaW1wb3J0IHtGb3JtRGF0YSwgRmlsZSwgZmlsZUZyb21QYXRofSBmcm9tIFwiZm9ybWRhdGEtbm9kZVwiXG4gICAqIGltcG9ydCB7Rm9ybURhdGFFbmNvZGVyfSBmcm9tIFwiZm9ybS1kYXRhLWVuY29kZXJcIlxuICAgKlxuICAgKiBpbXBvcnQgZmV0Y2ggZnJvbSBcIm5vZGUtZmV0Y2hcIlxuICAgKlxuICAgKiBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKClcbiAgICpcbiAgICogZm9ybS5zZXQoXCJmaWVsZFwiLCBcIkp1c3QgYSByYW5kb20gc3RyaW5nXCIpXG4gICAqIGZvcm0uc2V0KFwiZmlsZVwiLCBuZXcgRmlsZShbXCJVc2luZyBmaWxlcyBpcyBjbGFzcyBhbWF6aW5nXCJdLCBcImZpbGUudHh0XCIpKVxuICAgKiBmb3JtLnNldChcImZpbGVGcm9tUGF0aFwiLCBhd2FpdCBmaWxlRnJvbVBhdGgoXCJwYXRoL3RvL2EvZmlsZS50eHRcIikpXG4gICAqXG4gICAqIGNvbnN0IGVuY29kZXIgPSBuZXcgRm9ybURhdGFFbmNvZGVyKGZvcm0pXG4gICAqXG4gICAqIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAqICAgbWV0aG9kOiBcInBvc3RcIixcbiAgICogICBoZWFkZXJzOiBlbmNvZGVyLmhlYWRlcnMsXG4gICAqICAgYm9keTogUmVhZGFibGUuZnJvbShlbmNvZGVyLmVuY29kZSgpKSAvLyBvciBSZWFkYWJsZS5mcm9tKGVuY29kZXIpXG4gICAqIH1cbiAgICpcbiAgICogY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vaHR0cGJpbi5vcmcvcG9zdFwiLCBvcHRpb25zKVxuICAgKlxuICAgKiBjb25zb2xlLmxvZyhhd2FpdCByZXNwb25zZS5qc29uKCkpXG4gICAqIGBgYFxuICAgKi9cbiAgYXN5bmMgKmVuY29kZSgpIHtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy52YWx1ZXMoKSkge1xuICAgICAgaWYgKGlzRmlsZShwYXJ0KSkge1xuICAgICAgICB5aWVsZCogZ2V0U3RyZWFtSXRlcmF0b3IocGFydC5zdHJlYW0oKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5aWVsZCogY2h1bmsocGFydCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGl0ZXJhdG9yIGFsbG93aW5nIHRvIHJlYWQgdGhyb3VnaCB0aGUgZW5jb2RlciBkYXRhIHVzaW5nIGZvci4uLm9mIGxvb3BzXG4gICAqL1xuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXMoKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhbiAqKmFzeW5jKiogaXRlcmF0b3IgYWxsb3dpbmcgdG8gcmVhZCB0aHJvdWdoIHRoZSBlbmNvZGVyIGRhdGEgdXNpbmcgZm9yLWF3YWl0Li4ub2YgbG9vcHNcbiAgICovXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2RlKCk7XG4gIH1cbn07XG5fQ1JMRiA9IG5ldyBXZWFrTWFwKCk7XG5fQ1JMRl9CWVRFUyA9IG5ldyBXZWFrTWFwKCk7XG5fQ1JMRl9CWVRFU19MRU5HVEggPSBuZXcgV2Vha01hcCgpO1xuX0RBU0hFUyA9IG5ldyBXZWFrTWFwKCk7XG5fZW5jb2RlciA9IG5ldyBXZWFrTWFwKCk7XG5fZm9vdGVyID0gbmV3IFdlYWtNYXAoKTtcbl9mb3JtID0gbmV3IFdlYWtNYXAoKTtcbl9vcHRpb25zID0gbmV3IFdlYWtNYXAoKTtcbl9nZXRGaWVsZEhlYWRlciA9IG5ldyBXZWFrU2V0KCk7XG5nZXRGaWVsZEhlYWRlcl9mbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIGxldCBoZWFkZXIgPSBcIlwiO1xuICBoZWFkZXIgKz0gYCR7X19wcml2YXRlR2V0KHRoaXMsIF9EQVNIRVMpfSR7dGhpcy5ib3VuZGFyeX0ke19fcHJpdmF0ZUdldCh0aGlzLCBfQ1JMRil9YDtcbiAgaGVhZGVyICs9IGBDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9XCIke2VzY2FwZU5hbWUobmFtZSl9XCJgO1xuICBpZiAoaXNGaWxlKHZhbHVlKSkge1xuICAgIGhlYWRlciArPSBgOyBmaWxlbmFtZT1cIiR7ZXNjYXBlTmFtZSh2YWx1ZS5uYW1lKX1cIiR7X19wcml2YXRlR2V0KHRoaXMsIF9DUkxGKX1gO1xuICAgIGhlYWRlciArPSBgQ29udGVudC1UeXBlOiAke3ZhbHVlLnR5cGUgfHwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIn1gO1xuICB9XG4gIGlmIChfX3ByaXZhdGVHZXQodGhpcywgX29wdGlvbnMpLmVuYWJsZUFkZGl0aW9uYWxIZWFkZXJzID09PSB0cnVlKSB7XG4gICAgY29uc3Qgc2l6ZSA9IGlzRmlsZSh2YWx1ZSkgPyB2YWx1ZS5zaXplIDogdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICBpZiAoc2l6ZSAhPSBudWxsICYmICFpc05hTihzaXplKSkge1xuICAgICAgaGVhZGVyICs9IGAke19fcHJpdmF0ZUdldCh0aGlzLCBfQ1JMRil9Q29udGVudC1MZW5ndGg6ICR7c2l6ZX1gO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX19wcml2YXRlR2V0KHRoaXMsIF9lbmNvZGVyKS5lbmNvZGUoYCR7aGVhZGVyfSR7X19wcml2YXRlR2V0KHRoaXMsIF9DUkxGKS5yZXBlYXQoMil9YCk7XG59O1xuX2dldENvbnRlbnRMZW5ndGggPSBuZXcgV2Vha1NldCgpO1xuZ2V0Q29udGVudExlbmd0aF9mbiA9IGZ1bmN0aW9uKCkge1xuICBsZXQgbGVuZ3RoID0gMDtcbiAgZm9yIChjb25zdCBbbmFtZSwgcmF3XSBvZiBfX3ByaXZhdGVHZXQodGhpcywgX2Zvcm0pKSB7XG4gICAgY29uc3QgdmFsdWUgPSBpc0ZpbGUocmF3KSA/IHJhdyA6IF9fcHJpdmF0ZUdldCh0aGlzLCBfZW5jb2RlcikuZW5jb2RlKFxuICAgICAgbm9ybWFsaXplVmFsdWUocmF3KVxuICAgICk7XG4gICAgY29uc3Qgc2l6ZSA9IGlzRmlsZSh2YWx1ZSkgPyB2YWx1ZS5zaXplIDogdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICBpZiAoc2l6ZSA9PSBudWxsIHx8IGlzTmFOKHNpemUpKSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBsZW5ndGggKz0gX19wcml2YXRlTWV0aG9kKHRoaXMsIF9nZXRGaWVsZEhlYWRlciwgZ2V0RmllbGRIZWFkZXJfZm4pLmNhbGwodGhpcywgbmFtZSwgdmFsdWUpLmJ5dGVMZW5ndGg7XG4gICAgbGVuZ3RoICs9IHNpemU7XG4gICAgbGVuZ3RoICs9IF9fcHJpdmF0ZUdldCh0aGlzLCBfQ1JMRl9CWVRFU19MRU5HVEgpO1xuICB9XG4gIHJldHVybiBTdHJpbmcobGVuZ3RoICsgX19wcml2YXRlR2V0KHRoaXMsIF9mb290ZXIpLmJ5dGVMZW5ndGgpO1xufTtcbi8vIEFubm90YXRlIHRoZSBDb21tb25KUyBleHBvcnQgbmFtZXMgZm9yIEVTTSBpbXBvcnQgaW4gbm9kZTpcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICBGb3JtRGF0YUVuY29kZXIsXG4gIGlzRmlsZSxcbiAgaXNGb3JtRGF0YVxufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/form-data-encoder/lib/index.cjs\n");

/***/ })

};
;