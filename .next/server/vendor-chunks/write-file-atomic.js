"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/write-file-atomic";
exports.ids = ["vendor-chunks/write-file-atomic"];
exports.modules = {

/***/ "(ssr)/./node_modules/write-file-atomic/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/write-file-atomic/lib/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\nmodule.exports._cleanupOnExit = cleanupOnExit\n\nconst fs = __webpack_require__(/*! fs */ \"fs\")\nconst MurmurHash3 = __webpack_require__(/*! imurmurhash */ \"(ssr)/./node_modules/imurmurhash/imurmurhash.js\")\nconst { onExit } = __webpack_require__(/*! signal-exit */ \"(ssr)/./node_modules/signal-exit/dist/cjs/index.js\")\nconst path = __webpack_require__(/*! path */ \"path\")\nconst { promisify } = __webpack_require__(/*! util */ \"util\")\nconst activeFiles = {}\n\n// if we run inside of a worker_thread, `process.pid` is not unique\n/* istanbul ignore next */\nconst threadId = (function getId () {\n  try {\n    const workerThreads = __webpack_require__(/*! worker_threads */ \"worker_threads\")\n\n    /// if we are in main thread, this is set to `0`\n    return workerThreads.threadId\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0\n  }\n})()\n\nlet invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(threadId))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction cleanupOnExit (tmpfile) {\n  return () => {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile)\n    } catch {\n      // ignore errors\n    }\n  }\n}\n\nfunction serializeActiveFile (absoluteName) {\n  return new Promise(resolve => {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) {\n      activeFiles[absoluteName] = []\n    }\n\n    activeFiles[absoluteName].push(resolve) // add this job to the queue\n    if (activeFiles[absoluteName].length === 1) {\n      resolve()\n    } // kick off the first one\n  })\n}\n\n// https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342\nfunction isChownErrOk (err) {\n  if (err.code === 'ENOSYS') {\n    return true\n  }\n\n  const nonroot = !process.getuid || process.getuid() !== 0\n  if (nonroot) {\n    if (err.code === 'EINVAL' || err.code === 'EPERM') {\n      return true\n    }\n  }\n\n  return false\n}\n\nasync function writeFileAsync (filename, data, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  let fd\n  let tmpfile\n  /* istanbul ignore next -- The closure only gets called when onExit triggers */\n  const removeOnExitHandler = onExit(cleanupOnExit(() => tmpfile))\n  const absoluteName = path.resolve(filename)\n\n  try {\n    await serializeActiveFile(absoluteName)\n    const truename = await promisify(fs.realpath)(filename).catch(() => filename)\n    tmpfile = getTmpname(truename)\n\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      const stats = await promisify(fs.stat)(truename).catch(() => {})\n      if (stats) {\n        if (options.mode == null) {\n          options.mode = stats.mode\n        }\n\n        if (options.chown == null && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      }\n    }\n\n    fd = await promisify(fs.open)(tmpfile, 'w', options.mode)\n    if (options.tmpfileCreated) {\n      await options.tmpfileCreated(tmpfile)\n    }\n    if (ArrayBuffer.isView(data)) {\n      await promisify(fs.write)(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      await promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n\n    if (options.fsync !== false) {\n      await promisify(fs.fsync)(fd)\n    }\n\n    await promisify(fs.close)(fd)\n    fd = null\n\n    if (options.chown) {\n      await promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      })\n    }\n\n    if (options.mode) {\n      await promisify(fs.chmod)(tmpfile, options.mode).catch(err => {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      })\n    }\n\n    await promisify(fs.rename)(tmpfile, truename)\n  } finally {\n    if (fd) {\n      await promisify(fs.close)(fd).catch(\n        /* istanbul ignore next */\n        () => {}\n      )\n    }\n    removeOnExitHandler()\n    await promisify(fs.unlink)(tmpfile).catch(() => {})\n    activeFiles[absoluteName].shift() // remove the element added by serializeSameFile\n    if (activeFiles[absoluteName].length > 0) {\n      activeFiles[absoluteName][0]() // start next job if one is pending\n    } else {\n      delete activeFiles[absoluteName]\n    }\n  }\n}\n\nasync function writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = {}\n  }\n\n  const promise = writeFileAsync(filename, data, options)\n  if (callback) {\n    try {\n      const result = await promise\n      return callback(result)\n    } catch (err) {\n      return callback(err)\n    }\n  }\n\n  return promise\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  } else if (!options) {\n    options = {}\n  }\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  const tmpfile = getTmpname(filename)\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      const stats = fs.statSync(filename)\n      options = Object.assign({}, options)\n      if (!options.mode) {\n        options.mode = stats.mode\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = { uid: stats.uid, gid: stats.gid }\n      }\n    } catch (ex) {\n      // ignore stat errors\n    }\n  }\n\n  let fd\n  const cleanup = cleanupOnExit(tmpfile)\n  const removeOnExitHandler = onExit(cleanup)\n\n  let threw = true\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode || 0o666)\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile)\n    }\n    if (ArrayBuffer.isView(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd)\n    }\n\n    fs.closeSync(fd)\n    fd = null\n\n    if (options.chown) {\n      try {\n        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      }\n    }\n\n    if (options.mode) {\n      try {\n        fs.chmodSync(tmpfile, options.mode)\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err\n        }\n      }\n    }\n\n    fs.renameSync(tmpfile, filename)\n    threw = false\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd)\n      } catch (ex) {\n        // ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n    removeOnExitHandler()\n    if (threw) {\n      cleanup()\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/write-file-atomic/lib/index.js\n");

/***/ })

};
;